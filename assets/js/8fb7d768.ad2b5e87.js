"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[758],{876:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var a=r(2784);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function n(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,s=function(e,t){if(null==e)return{};var r,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=a.createContext({}),l=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):n(n({},t),e)),r},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},v=a.forwardRef((function(e,t){var r=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(r),v=s,h=u["".concat(c,".").concat(v)]||u[v]||m[v]||o;return r?a.createElement(h,n(n({ref:t},p),{},{components:r})):a.createElement(h,n({ref:t},p))}));function h(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=r.length,n=new Array(o);n[0]=v;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:s,n[1]=i;for(var l=2;l<o;l++)n[l]=r[l];return a.createElement.apply(null,n)}return a.createElement.apply(null,r)}v.displayName="MDXCreateElement"},4034:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>n,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=r(7896),s=(r(2784),r(876));const o={sidebar_position:2},n="Goals Service",i={unversionedId:"project-structure/services/goals-service",id:"project-structure/services/goals-service",title:"Goals Service",description:"https://github.com/marleypowell/goalie/tree/main/apps/services/goals-service",source:"@site/docs/project-structure/services/goals-service.md",sourceDirName:"project-structure/services",slug:"/project-structure/services/goals-service",permalink:"/project-structure/services/goals-service",draft:!1,editUrl:"https://github.com/marleypowell/goalie/tree/main/apps/website/docs/project-structure/services/goals-service.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"API Gateway",permalink:"/project-structure/services/api-gateway"},next:{title:"OAuth Agent Service",permalink:"/project-structure/services/oauth-agent-service"}},c={},l=[],p={toc:l},u="wrapper";function m(e){let{components:t,...r}=e;return(0,s.kt)(u,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"goals-service"},"Goals Service"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/marleypowell/goalie/tree/main/apps/services/goals-service"},"https://github.com/marleypowell/goalie/tree/main/apps/services/goals-service")),(0,s.kt)("p",null,"The Goals Service is a ",(0,s.kt)("a",{parentName:"p",href:"https://nestjs.com/"},"NestJS")," application that is responsible for managing goals. For storing data, the goals services uses ",(0,s.kt)("a",{parentName:"p",href:"https://eventstore.com/"},"Eventstore"),". Eventstore is an open-source state-transition database that is optimized for storing events. The goals service uses Eventstore to store events that represent changes to goals, this pattern is known as ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing"},"Event Sourcing"),". The goals service uses ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs"},"CQRS")," to read and write data. The goals service uses ",(0,s.kt)("a",{parentName:"p",href:"https://nats.io/"},"NATS")," to communicate with the ",(0,s.kt)("a",{parentName:"p",href:"../../project-structure/services/api-gateway"},"API Gateway"),"."),(0,s.kt)("p",null,"Event Sourcing was used instead of a traditional relational database because it was a better fit for the domain. This provided built-in support for auditing which allowed the goals service to easily provide an audit trail for goals. Event Sourcing also provided built-in support for querying which allowed the goals service to easily provide an activity history of goals."),(0,s.kt)("p",null,"The Goals Service is built using the following technologies:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://nestjs.com/"},"NestJS")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://eventstore.com/"},"Event Store")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://nats.io/"},"NATS")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://opentelemetry.io/"},"Open Telemetry"))),(0,s.kt)("p",null,"A detailed architecture diagram for the goals service can be found ",(0,s.kt)("a",{parentName:"p",href:"../../architecture/goals-service-architecture"},"here"),"."))}m.isMDXComponent=!0}}]);