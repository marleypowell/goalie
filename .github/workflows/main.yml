name: Build and Deploy

on:
  push:
    branches: ['main']
    # Publish semver tags as releases.
    tags: ['v*.*.*']
  # pull_request:

env:
  REGISTRY: goalie.azurecr.io

permissions:
  contents: write

jobs:
  temp:
    runs-on: ubuntu-latest
    steps:
      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push (api-gateway)
        id: build-api-gateway
        run: |
          echo $(docker buildx imagetools inspect goalie.azurecr.io/api-gateway:latest)
          digest=$(docker buildx imagetools inspect goalie.azurecr.io/api-gateway:latest | jq -r .digest)
          echo $digest
  build:
    runs-on: ubuntu-latest
    outputs:
      api_gateway_image_digest: ${{ steps.build-api-gateway.outputs.api_gateway_image_digest }}
      oauth_agent_image_digest: ${{ steps.build-oauth-agent-service.outputs.oauth_agent_image_digest }}
      goals_service_image_digest: ${{ steps.build-goals-service.outputs.goals_service_image_digest }}
      users_service_image_digest: ${{ steps.build-users-service.outputs.users_service_image_digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn

      - run: yarn install --frozen-lockfile

      - run: yarn nx-cloud record -- yarn nx format:check

      - run: yarn nx run-many --target=lint --all --parallel=3 --configuration=production
      - run: yarn nx run-many --target=test --all --parallel=3 --ci --code-coverage
      - run: yarn nx run-many --target=build --all --parallel=3 --configuration=production --verbose

      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push (api-gateway)
        id: build-api-gateway
        run: |
          docker build -f apps/api-gateway/Dockerfile . -t ${{ env.REGISTRY }}/api-gateway:latest
          docker push ${{ env.REGISTRY }}/api-gateway:latest
          digest=$(docker buildx imagetools inspect goalie.azurecr.io/api-gateway:latest | jq -r .digest)
          echo $digest
          echo "api_gateway_image_digest=$digest" >> "$GITHUB_OUTPUT"

      - name: Build and Push (oauth-agent-service)
        id: build-oauth-agent-service
        run: |
          docker build -f apps/services/oauth-agent-service/Dockerfile . -t ${{ env.REGISTRY }}/oauth-agent-service:latest
          docker push ${{ env.REGISTRY }}/oauth-agent-service:latest
          digest=$(docker buildx imagetools inspect goalie.azurecr.io/oauth-agent-service:latest | jq -r .digest)
          echo $digest
          echo "oauth_agent_image_digest=$digest" >> "$GITHUB_OUTPUT"

      - name: Build and Push (goals-service)
        id: build-goals-service
        run: |
          docker build -f apps/services/goals-service/Dockerfile . -t ${{ env.REGISTRY }}/goals-service:latest
          docker push ${{ env.REGISTRY }}/goals-service:latest
          digest=$(docker buildx imagetools inspect goalie.azurecr.io/goals-service:latest | jq -r .digest)
          echo $digest
          echo "goals_service_image_digest=$digest" >> "$GITHUB_OUTPUT"

      - name: Build and Push (users-service)
        id: build-users-service
        run: |
          docker build -f apps/services/users-service/Dockerfile . -t ${{ env.REGISTRY }}/users-service:latest
          docker push ${{ env.REGISTRY }}/users-service:latest
          digest=$(docker buildx imagetools inspect goalie.azurecr.io/users-service:latest | jq -r .digest)
          echo $digest
          echo "users_service_image_digest=$digest" >> "$GITHUB_OUTPUT"

      - name: Publish Docs
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Build output to publish to the `gh-pages` branch:
          publish_dir: ./apps/website/build
          # The following lines assign commit authorship to the official
          # GH-Actions bot for deploys to `gh-pages` branch:
          # https://github.com/actions/checkout/issues/13#issuecomment-724415212
          # The GH actions bot is used by default if you didn't specify the two fields.
          # You can swap them out with your own user credentials.
          user_name: github-actions[bot]
          user_email: 41898282+github-actions[bot]@users.noreply.github.com

  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

  deploy:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform -chdir=deploy/terraform-config init -backend-config="storage_account_name=goalieterraform" -backend-config="container_name=terraform" -backend-config="key=terraform.tfstate" -backend-config="access_key=${{ secrets.TERRAFORM_STORAGE_ACCOUNT_KEY }}" -upgrade

      - name: Set Terraform variables
        run: |
          tee terraform.tfvars <<EOF
          cookie_encryption_key     = "${{ secrets.COOKIE_ENCRYPTION_KEY }}"
          oauth_proxy_client_secret = "${{ secrets.OAUTH_PROXY_CLIENT_SECRET }}"
          oauth_agent_client_secret = "${{ secrets.OAUTH_AGENT_CLIENT_SECRET }}"
          accounts_client_secret    = "${{ secrets.ACCOUNTS_CLIENT_SECRET }}"
          api_gateway_image_full    = "${{ env.REGISTRY }}/api-gateway@${{ needs.build.outputs.api_gateway_image_digest }}"
          oauth_agent_image_full    = "${{ env.REGISTRY }}/oauth-agent-service@${{ needs.build.outputs.oauth_agent_image_digest }}"
          goals_service_image_full  = "${{ env.REGISTRY }}/goals-service@${{ needs.build.outputs.goals_service_image_digest }}"
          users_service_image_full  = "${{ env.REGISTRY }}/users-service@${{ needs.build.outputs.users_service_image_digest }}"
          EOF
        working-directory: deploy/terraform-config

      - name: Terraform Format
        run: terraform -chdir=deploy/terraform-config fmt -check

      - name: Terraform Plan
        run: terraform -chdir=deploy/terraform-config plan -out tfplan
        env:
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}

      - name: Terraform Validate and Apply
        run: terraform -chdir=deploy/terraform-config apply tfplan
        env:
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}

      - name: Retrieve Terraform outputs
        run: |
          $outputs = terraform -chdir=deploy/terraform-config output -json | ConvertFrom-Json -AsHashTable
          $outputs.Keys | ForEach-Object {
              $key = $_
              $output = $outputs[$key]
              $value = $output.value
              $sensitive = $output.sensitive

              Write-Host "$key = $(($sensitive ? "***" : $value))"
              if ($sensitive) {
                Write-Host "::add-mask::$value"
              }
              "$key=$value" >> $env:GITHUB_ENV
          }
        shell: pwsh

      - name: Deploy Frontend
        id: deploy-frontend
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DELIGHTFUL_MEADOW_06EA42503 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: 'upload'
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: '/' # App source code path
          api_location: '' # Api source code path - optional
          output_location: 'dist/apps/frontend' # Built app content directory - optional
          app_build_command: 'yarn build:frontend'
          ###### End of Repository/Build Configurations ######
